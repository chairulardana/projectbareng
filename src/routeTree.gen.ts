/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './pages/__root'
import { Route as ProtectedImport } from './pages/_protected'
import { Route as IndexImport } from './pages/index'

// Create Virtual Routes

const ProtectedSnackIndexLazyImport = createFileRoute('/_protected/snack/')()
const ProtectedKebabIndexLazyImport = createFileRoute('/_protected/kebab/')()
const ProtectedDrinkIndexLazyImport = createFileRoute('/_protected/drink/')()
const ProtectedDashboardIndexLazyImport = createFileRoute(
  '/_protected/dashboard/',
)()
const ProtectedPaketMakananIndexLazyImport = createFileRoute(
  '/_protected/PaketMakanan/',
)()

// Create/Update Routes

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedSnackIndexLazyRoute = ProtectedSnackIndexLazyImport.update({
  id: '/snack/',
  path: '/snack/',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./pages/_protected/snack/index.lazy').then((d) => d.Route),
)

const ProtectedKebabIndexLazyRoute = ProtectedKebabIndexLazyImport.update({
  id: '/kebab/',
  path: '/kebab/',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./pages/_protected/kebab/index.lazy').then((d) => d.Route),
)

const ProtectedDrinkIndexLazyRoute = ProtectedDrinkIndexLazyImport.update({
  id: '/drink/',
  path: '/drink/',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./pages/_protected/drink/index.lazy').then((d) => d.Route),
)

const ProtectedDashboardIndexLazyRoute =
  ProtectedDashboardIndexLazyImport.update({
    id: '/dashboard/',
    path: '/dashboard/',
    getParentRoute: () => ProtectedRoute,
  } as any).lazy(() =>
    import('./pages/_protected/dashboard/index.lazy').then((d) => d.Route),
  )

const ProtectedPaketMakananIndexLazyRoute =
  ProtectedPaketMakananIndexLazyImport.update({
    id: '/PaketMakanan/',
    path: '/PaketMakanan/',
    getParentRoute: () => ProtectedRoute,
  } as any).lazy(() =>
    import('./pages/_protected/PaketMakanan/index.lazy').then((d) => d.Route),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/_protected/PaketMakanan/': {
      id: '/_protected/PaketMakanan/'
      path: '/PaketMakanan'
      fullPath: '/PaketMakanan'
      preLoaderRoute: typeof ProtectedPaketMakananIndexLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/dashboard/': {
      id: '/_protected/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof ProtectedDashboardIndexLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/drink/': {
      id: '/_protected/drink/'
      path: '/drink'
      fullPath: '/drink'
      preLoaderRoute: typeof ProtectedDrinkIndexLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/kebab/': {
      id: '/_protected/kebab/'
      path: '/kebab'
      fullPath: '/kebab'
      preLoaderRoute: typeof ProtectedKebabIndexLazyImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/snack/': {
      id: '/_protected/snack/'
      path: '/snack'
      fullPath: '/snack'
      preLoaderRoute: typeof ProtectedSnackIndexLazyImport
      parentRoute: typeof ProtectedImport
    }
  }
}

// Create and export the route tree

interface ProtectedRouteChildren {
  ProtectedPaketMakananIndexLazyRoute: typeof ProtectedPaketMakananIndexLazyRoute
  ProtectedDashboardIndexLazyRoute: typeof ProtectedDashboardIndexLazyRoute
  ProtectedDrinkIndexLazyRoute: typeof ProtectedDrinkIndexLazyRoute
  ProtectedKebabIndexLazyRoute: typeof ProtectedKebabIndexLazyRoute
  ProtectedSnackIndexLazyRoute: typeof ProtectedSnackIndexLazyRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedPaketMakananIndexLazyRoute: ProtectedPaketMakananIndexLazyRoute,
  ProtectedDashboardIndexLazyRoute: ProtectedDashboardIndexLazyRoute,
  ProtectedDrinkIndexLazyRoute: ProtectedDrinkIndexLazyRoute,
  ProtectedKebabIndexLazyRoute: ProtectedKebabIndexLazyRoute,
  ProtectedSnackIndexLazyRoute: ProtectedSnackIndexLazyRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof ProtectedRouteWithChildren
  '/PaketMakanan': typeof ProtectedPaketMakananIndexLazyRoute
  '/dashboard': typeof ProtectedDashboardIndexLazyRoute
  '/drink': typeof ProtectedDrinkIndexLazyRoute
  '/kebab': typeof ProtectedKebabIndexLazyRoute
  '/snack': typeof ProtectedSnackIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof ProtectedRouteWithChildren
  '/PaketMakanan': typeof ProtectedPaketMakananIndexLazyRoute
  '/dashboard': typeof ProtectedDashboardIndexLazyRoute
  '/drink': typeof ProtectedDrinkIndexLazyRoute
  '/kebab': typeof ProtectedKebabIndexLazyRoute
  '/snack': typeof ProtectedSnackIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_protected': typeof ProtectedRouteWithChildren
  '/_protected/PaketMakanan/': typeof ProtectedPaketMakananIndexLazyRoute
  '/_protected/dashboard/': typeof ProtectedDashboardIndexLazyRoute
  '/_protected/drink/': typeof ProtectedDrinkIndexLazyRoute
  '/_protected/kebab/': typeof ProtectedKebabIndexLazyRoute
  '/_protected/snack/': typeof ProtectedSnackIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/PaketMakanan'
    | '/dashboard'
    | '/drink'
    | '/kebab'
    | '/snack'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/PaketMakanan' | '/dashboard' | '/drink' | '/kebab' | '/snack'
  id:
    | '__root__'
    | '/'
    | '/_protected'
    | '/_protected/PaketMakanan/'
    | '/_protected/dashboard/'
    | '/_protected/drink/'
    | '/_protected/kebab/'
    | '/_protected/snack/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedRoute: typeof ProtectedRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedRoute: ProtectedRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_protected"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_protected": {
      "filePath": "_protected.tsx",
      "children": [
        "/_protected/PaketMakanan/",
        "/_protected/dashboard/",
        "/_protected/drink/",
        "/_protected/kebab/",
        "/_protected/snack/"
      ]
    },
    "/_protected/PaketMakanan/": {
      "filePath": "_protected/PaketMakanan/index.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/dashboard/": {
      "filePath": "_protected/dashboard/index.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/drink/": {
      "filePath": "_protected/drink/index.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/kebab/": {
      "filePath": "_protected/kebab/index.lazy.tsx",
      "parent": "/_protected"
    },
    "/_protected/snack/": {
      "filePath": "_protected/snack/index.lazy.tsx",
      "parent": "/_protected"
    }
  }
}
ROUTE_MANIFEST_END */
